SOLID
----------------------------------------------------------------------------------
S - Single Responsibility..Esse princípio declara que uma classe deve ser especializada em um único assunto e possuir apenas uma responsabilidade dentro do software, ou seja, a classe deve ter uma única tarefa ou ação para executar.
----------------------------------------------------------------------------------
O - Open Closed............Objetos ou entidades devem estar abertos para extensão, mas fechados para modificação, ou seja, quando novos comportamentos e recursos precisam ser adicionados no software, devemos estender e não alterar o código fonte original.
----------------------------------------------------------------------------------
L - Liskov Substitution....Uma classe derivada deve ser substituível por sua classe base.Um exemplo mais simples e de fácil compreensão dessa definição. Seria:
Se S é um subtipo de T, então os objetos do tipo T, em um programa, podem ser substituídos pelos objetos de tipo S sem que seja necessário alterar as propriedades deste programa.

----------------------------------------------------------------------------------
I - Interface Segregation..Uma classe não deve ser forçada a implementar interfaces e métodos que não irão utilizar. Esse princípio basicamente diz que é melhor criar interfaces mais específicas ao invés de termos uma única interface genérica.

----------------------------------------------------------------------------------
D - Dependency.............Dependa de abstrações e não de implementações.De acordo com Uncle Bob, esse princípio pode ser definido da seguinte forma:

>. Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender da abstração.

>. Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.

No contexto da programação orientada a objetos, é comum que as pessoas confundam a Inversão de Dependência com a Injeção de Dependência, porém são coisas distintas, mas que relacionam entre si com um proposito em comum, deixar o código desacoplado.

Importante: Inversão de Dependência não é igual a Injeção de Dependência, fique ciente disso! A Inversão de Dependência é um princípio (Conceito) e a Injeção de Dependência é um padrão de projeto (Design Pattern).
----------------------------------------------------------------------------------